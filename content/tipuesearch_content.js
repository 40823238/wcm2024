var tipuesearch = {"pages": [{'title': 'About', 'text': '\n 我想畢業\xa0 \n 網頁:  https://40823238.github.io/wcm2024 \n 網誌: 請填入目前網站所在的 URL/blog,  https://mde.tw/cmsimde_site/blog \n 簡報: 請填入目前網站所在的 URL/reveal,  https://mde.tw/cmsimde_site/reveal \n 倉儲:\xa0 40823238/wcm2024 (github.com) \n 本 cmsimde 網際內容管理系統的對應 Template 倉儲: \n https://github.com/mdecycu/cmsimde_site \n 此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改 \n 倉儲對應網站:  https://mde.tw/cmsimde_site \n', 'tags': '', 'url': 'About.html'}, {'title': '周次心得', 'text': 'w1 \n 建立倉儲 \n w2 \n 整理網站的基礎架構 \n w3 \n 加入分組倉儲，並建立自己的子模組 \n w4 \n 組員在建立子模組時出錯，導致小組倉儲無法push，經過討論區回報後，助教協助解決了問題。 \n w5 \n 小組倉儲權限設定 \n w6 \n 向chatGPT提問git的相關問題，詳見work-w6頁面 \n w9 \n 期中自評 \n w10 \n 加入1astud-site，並建立子模組。 \n w13 \n 抓取班級課表 \n w14 \n AI猜數字 \n w15 \n 決定期末專案主題 \n 主題:打磚塊遊戲 \n w16 \n 期末專題初步完成 \n w17 \n 透過chatGPT的協助，將遊戲的開始按鈕完成 \n \n \n \n', 'tags': '', 'url': '周次心得.html'}, {'title': 'work', 'text': '', 'tags': '', 'url': 'work.html'}, {'title': 'w6', 'text': '', 'tags': '', 'url': 'w6.html'}, {'title': 'Git ChatGPT', 'text': 'Git的歷史 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 2005年 ：Git 誕生於 Linus Torvalds 的手中。這源於他對於現有版本控制系統的不滿，特別是在管理 Linux 內核開發方面的限制。 \n \n \n 2005年4月 ：Git 發布了首個版本。它最初被設計為 Linux 內核的版本控制系統，以提供高速度、簡單易用的工具。 \n \n \n 2005年6月 ：Git 開始在 Linux 內核社區中廣泛應用，逐漸受到人們的重視和喜愛。 \n \n \n 2005年7月 ：Git 1.0 版本發布。這標誌著 Git 開始成熟，並被廣泛應用於開源項目中。 \n \n \n 2008年 ：GitHub 成立。GitHub 是一個基於 Git 的代碼托管平台，為開發者提供了共享代碼、協作開發的平台，極大地推動了 Git 的普及和應用。 \n \n \n 2013年 ：Git 2.0 版本發布。這個版本引入了一些重要的改進和新功能，包括一些與用戶界面和工作流相關的改進。 \n \n \n 2016年 ：微軟收購 GitHub。這一收購進一步強化了 Git 的地位，使更多開發者能夠訪問和使用 Git。 \n \n \n 2020年 ：GitHub 宣布刪除主要軟件項目中的 "master" 分支，以改用中性的術語如 "main"。這一舉措旨在促進包容和多樣性，消除過去的種族主義歷史所帶來的負面影響。 \n \n \n 2022年 ：Git 3.0 版本發布。這個版本帶來了更多的性能改進、安全增強和用戶體驗優化，使 Git 在開發領域繼續保持領先地位。 \n \n \n 這些都是 Git 的主要里程碑，自從誕生以來，Git 在軟件開發領域扮演著重要角色，成為最受歡迎的版本控制系統之一。 \n \n Git 如何在解決團隊共同維護一個相同內容時發生的問題 \n 在解決團隊共同維護相同內容時，Git 提供了解決以下問題的工具和機制： \n \n \n 程式碼衝突 ：當多個團隊成員同時修改同一個檔案時，可能會導致程式碼衝突，使得合併變得困難。Git 提供了分支和合併的功能，讓團隊成員可以在獨立的分支上工作，最後將其合併回主分支。在合併時，Git 能夠檢測到衝突，並允許開發者手動解決這些衝突。 \n \n \n 版本控制 ：在團隊協作中，需要對程式碼的不同版本進行管理，以便追蹤修改歷史並回滾到先前的版本。Git 提供了強大的版本控制功能，可以輕鬆地記錄每次提交的變化，並且可以通過標籤或特定的提交 ID 來訪問先前的版本。 \n \n \n 協作與程式碼審查 ：團隊成員通常需要在程式碼上進行協作和審查。Git 可以通過分支、提交和 Pull Request（PR）等功能來促進團隊成員之間的協作。團隊成員可以通過建立分支來獨立開發功能，然後通過提交 PR 來請求程式碼審查，以確保程式碼質量和一致性。 \n \n \n 程式碼管理和組織 ：隨著專案的增長，程式碼庫可能會變得龐大而複雜。Git 提供了一系列命令和工具，可以幫助團隊有效地管理和組織程式碼庫。例如，通過使用分支和標籤，可以將程式碼庫分割為可管理的單元，並對其進行版本控制。 \n \n \n 遠端協作 ：現代團隊通常分布在不同的地理位置，需要遠程協作。Git 提供了分散式版本控制的能力，使得團隊成員可以在不同的地方獨立工作，並通過遠程倉庫進行程式碼共享和同步。 \n \n \n 總的來說，Git 通過提供強大的版本控制、協作和管理功能，幫助團隊有效地共同維護相同內容，並解決了在團隊協作中常見的許多問題。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Git ChatGPT.html'}, {'title': 'Git client', 'text': '使用codespaces操作 \n 先在wcm2024下創建兩個目錄 \n gitproject \n gitserver \n 並且在兩個目錄下都創建repository/repo1 \n 完成後目錄看起來會長這樣 \n \n 接下來進入 /gitproject 執行 git config --global init.defaultBranch main \n \n 進入 /gitproject/repository/repo1 執行 git init \n \n 換到 \xa0/ gitserver/repository/repo1 執行 git init --bare \n \n 再回到 /gitproject/repository/repo1 執行\xa0echo "Hello, World!" > README.md \n 最後在add commit push 就可以 \n \n 目前由於執行完以上步驟後無法正常push，因此暫時將相關資料刪除。 \n', 'tags': '', 'url': 'Git client.html'}, {'title': '1astud-site', 'text': '40823238 心得 \n 這是我睽違兩年再次上github相關的課程，與之前相比，github多了很多方便的功能，其中最有感的是codespace，他不僅取代了可攜式系統，還讓操作更直觀，更重要的是不會占太多儲存空間。讓一些操作可以更快執行。 \n', 'tags': '', 'url': '1astud-site.html'}, {'title': '期中專案', 'text': '建立一個包含以下程式的gist \n 並且取出其URL:\xa0 gist.githubusercontent.com/40823238/cc863ec47f3362791ca01a10ecd5e786/raw/2a586f54076df00d5b1e846c550954a8a4089e7e/40823238_w10_step1.py \n 接著到Brython頁面的網址後加 ?src=URL \n 就可在 頁面 中運行程式 \n from browser import window, ajax\n  \ndef fetch_csv_data():\n  # CSV 檔案網址\n  url = "https://mdewcm2024.github.io/1astud-site/downloads/1a.txt"\n  \n  def on_complete(req):\n    if req.status == 200 or req.status == 0:\n      # 讀取 CSV 檔案內容\n      content = req.text\n  \n      # 依照換行符號拆分資料\n      lines = content.split(\'\\n\')\n  \n      # 建立空列表儲存資料\n      data = []\n  \n      # 遍歷每一行資料\n      for line in lines:\n        # 忽略空白行\n        if line.strip() == "":\n          continue\n  \n        # 依照逗號拆分資料\n        items = line.split(\',\')\n  \n        # 將拆分後的資料加入列表\n        data.append(items)\n  \n      # 印出結果\n      print(data)\n    else:\n      print("Error:", req.text)\n  \n  # 發送 AJAX 請求\n  req = ajax.ajax()\n  req.bind(\'complete\', on_complete)\n  req.open(\'GET\', url, True)\n  req.set_header(\'content-type\', \'application/x-www-form-urlencoded\')\n  req.send()\n  \n# 呼叫函式讀取 CSV 資料\nfetch_csv_data() \n', 'tags': '', 'url': '期中專案.html'}, {'title': '期末專案', 'text': '打磚塊小遊戲 \n Start Game   \n 程式碼(gist) \n \n', 'tags': '', 'url': '期末專案.html'}, {'title': 'Video', 'text': '這是本系畢業生陳致文 40823218 (github.com) 的AI作品 \n 他本人日前已前往日本深造 \n 期待他一年後學成歸國後給我們帶來更多作品 \n \n \n', 'tags': '', 'url': 'Video.html'}, {'title': 'Git', 'text': '\n', 'tags': '', 'url': 'Git.html'}, {'title': '1a-ag8', 'text': '網頁:  https://mdewcm2024.github.io/1a-ag8 \n 倉儲:\xa0 mdewcm2024/1a-ag8 \n', 'tags': '', 'url': '1a-ag8.html'}, {'title': '(已解決)小組倉儲無法正常push', 'text': '\n 從上週mdecycu的2次commit後(如圖一)，組員的push開始在build時就失敗(如圖二圖三)，導致網站無法正常更新。 \n 原因:小組組員用ssh將倉儲git clone時發生錯誤，導致該組員的子模組沒有清除乾淨，影響到倉儲轉Github Pages \n 解決辦法:把多餘的子模組刪除 \n \n (圖一)小組倉儲commits \n \n (圖二)check fail \n \n \n (圖三) build details \n \n', 'tags': '', 'url': '(已解決)小組倉儲無法正常push.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};