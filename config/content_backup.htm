<h1>About</h1>
<p><img alt="" height="121" src="/images/FB_IMG_1591077803729.jpg" width="91"/></p>
<p><span style="background-color: #000000;"><em><strong>我想畢業 </strong></em></span></p>
<p>網頁: <a href="https://40823238.github.io/wcm2024/content/index.html" rel="nofollow">https://40823238.github.io/wcm2024</a></p>
<p>網誌: 請填入目前網站所在的 URL/blog, <a href="https://mde.tw/cmsimde_site/blog">https://mde.tw/cmsimde_site/blog</a></p>
<p>簡報: 請填入目前網站所在的 URL/reveal, <a href="https://mde.tw/cmsimde_site/reveal">https://mde.tw/cmsimde_site/reveal</a></p>
<p>倉儲: <a href="https://github.com/40823238/wcm2024">40823238/wcm2024 (github.com)</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>week</h1>
<p>w1</p>
<p>建立倉儲</p>
<p>w2</p>
<p>整理網站的基礎架構</p>
<p>w3</p>
<p>加入分組倉儲，並建立自己的子模組</p>
<p>w4</p>
<p>組員在建立子模組時出錯，導致小組倉儲無法push，經過討論區回報後，助教協助解決了問題。</p>
<p>w5</p>
<p>小組倉儲權限設定</p>
<p>w6</p>
<p>向chatGPT提問git的相關問題，詳見work-w6頁面</p>
<p>w9</p>
<p>期中自評</p>
<p>w10</p>
<p>加入1astud-site，並建立子模組。</p>
<p>w13</p>
<p>抓取班級課表</p>
<p>w14</p>
<p>AI猜數字</p>
<p>w15</p>
<p>決定期末專案主題</p>
<p>主題:打磚塊遊戲</p>
<p>w16</p>
<p>期末專題初步完成</p>
<p>w17</p>
<p>透過chatGPT的協助，將遊戲的開始按鈕完成</p>
<p></p>
<p></p>
<p></p><h1>work</h1>
<h2>w6</h2>
<h3>Git ChatGPT</h3>
<p>Git的歷史</p>
<div class="flex-1 overflow-hidden">
<div class="react-scroll-to-bottom--css-eiptu-79elbk h-full">
<div class="react-scroll-to-bottom--css-eiptu-1n7m0yu">
<div class="flex flex-col text-sm pb-9">
<div class="w-full text-token-text-primary" data-testid="conversation-turn-5">
<div class="px-4 py-2 justify-center text-base md:gap-6 m-auto">
<div class="flex flex-1 text-base mx-auto gap-3 md:px-5 lg:px-1 xl:px-5 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem] group final-completion">
<div class="relative flex w-full flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="flex flex-grow flex-col max-w-full">
<div class="min-h-[20px] text-message flex flex-col items-start gap-3 whitespace-pre-wrap break-words [.text-message+&amp;]:mt-5 overflow-x-auto" data-message-author-role="assistant" data-message-id="207f51f7-ce19-41db-8703-4ba947f9d24e">
<div class="markdown prose w-full break-words dark:prose-invert dark">
<ol>
<li>
<p><strong>2005年</strong>：Git 誕生於 Linus Torvalds 的手中。這源於他對於現有版本控制系統的不滿，特別是在管理 Linux 內核開發方面的限制。</p>
</li>
<li>
<p><strong>2005年4月</strong>：Git 發布了首個版本。它最初被設計為 Linux 內核的版本控制系統，以提供高速度、簡單易用的工具。</p>
</li>
<li>
<p><strong>2005年6月</strong>：Git 開始在 Linux 內核社區中廣泛應用，逐漸受到人們的重視和喜愛。</p>
</li>
<li>
<p><strong>2005年7月</strong>：Git 1.0 版本發布。這標誌著 Git 開始成熟，並被廣泛應用於開源項目中。</p>
</li>
<li>
<p><strong>2008年</strong>：GitHub 成立。GitHub 是一個基於 Git 的代碼托管平台，為開發者提供了共享代碼、協作開發的平台，極大地推動了 Git 的普及和應用。</p>
</li>
<li>
<p><strong>2013年</strong>：Git 2.0 版本發布。這個版本引入了一些重要的改進和新功能，包括一些與用戶界面和工作流相關的改進。</p>
</li>
<li>
<p><strong>2016年</strong>：微軟收購 GitHub。這一收購進一步強化了 Git 的地位，使更多開發者能夠訪問和使用 Git。</p>
</li>
<li>
<p><strong>2020年</strong>：GitHub 宣布刪除主要軟件項目中的 "master" 分支，以改用中性的術語如 "main"。這一舉措旨在促進包容和多樣性，消除過去的種族主義歷史所帶來的負面影響。</p>
</li>
<li>
<p><strong>2022年</strong>：Git 3.0 版本發布。這個版本帶來了更多的性能改進、安全增強和用戶體驗優化，使 Git 在開發領域繼續保持領先地位。</p>
</li>
</ol>
<p>這些都是 Git 的主要里程碑，自從誕生以來，Git 在軟件開發領域扮演著重要角色，成為最受歡迎的版本控制系統之一。</p>
<p></p>
<p><span>Git 如何在解決團隊共同維護一個相同內容時發生的問題</span></p>
<p>在解決團隊共同維護相同內容時，Git 提供了解決以下問題的工具和機制：</p>
<ol>
<li>
<p><strong>程式碼衝突</strong>：當多個團隊成員同時修改同一個檔案時，可能會導致程式碼衝突，使得合併變得困難。Git 提供了分支和合併的功能，讓團隊成員可以在獨立的分支上工作，最後將其合併回主分支。在合併時，Git 能夠檢測到衝突，並允許開發者手動解決這些衝突。</p>
</li>
<li>
<p><strong>版本控制</strong>：在團隊協作中，需要對程式碼的不同版本進行管理，以便追蹤修改歷史並回滾到先前的版本。Git 提供了強大的版本控制功能，可以輕鬆地記錄每次提交的變化，並且可以通過標籤或特定的提交 ID 來訪問先前的版本。</p>
</li>
<li>
<p><strong>協作與程式碼審查</strong>：團隊成員通常需要在程式碼上進行協作和審查。Git 可以通過分支、提交和 Pull Request（PR）等功能來促進團隊成員之間的協作。團隊成員可以通過建立分支來獨立開發功能，然後通過提交 PR 來請求程式碼審查，以確保程式碼質量和一致性。</p>
</li>
<li>
<p><strong>程式碼管理和組織</strong>：隨著專案的增長，程式碼庫可能會變得龐大而複雜。Git 提供了一系列命令和工具，可以幫助團隊有效地管理和組織程式碼庫。例如，通過使用分支和標籤，可以將程式碼庫分割為可管理的單元，並對其進行版本控制。</p>
</li>
<li>
<p><strong>遠端協作</strong>：現代團隊通常分布在不同的地理位置，需要遠程協作。Git 提供了分散式版本控制的能力，使得團隊成員可以在不同的地方獨立工作，並通過遠程倉庫進行程式碼共享和同步。</p>
</li>
</ol>
<p>總的來說，Git 通過提供強大的版本控制、協作和管理功能，幫助團隊有效地共同維護相同內容，並解決了在團隊協作中常見的許多問題。</p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="w-full pt-2 md:pt-0 dark:border-white/20 md:border-transparent md:dark:border-transparent md:w-[calc(100%-.5rem)]"><form class="stretch mx-2 flex flex-row gap-3 last:mb-2 md:mx-4 md:last:mb-6 lg:mx-auto lg:max-w-2xl xl:max-w-3xl">
<div class="relative flex h-full flex-1 flex-col">
<div class="absolute bottom-full left-0 right-0"></div>
<div class="flex w-full items-center"></div>
</div>
</form></div>
<h3>Git client</h3>
<p>使用codespaces操作</p>
<p>先在wcm2024下創建兩個目錄</p>
<p>gitproject</p>
<p>gitserver</p>
<p>並且在兩個目錄下都創建repository/repo1</p>
<p>完成後目錄看起來會長這樣</p>
<p><img alt="" height="55" src="/images/repo1.png" width="373"/></p>
<p>接下來進入 /gitproject 執行 git config --global init.defaultBranch main</p>
<p><img alt="" height="19" src="/images/gitconfig1.png" width="800"/></p>
<p>進入 /gitproject/repository/repo1 執行 git init</p>
<p><img alt="" height="45" src="/images/gitinit1.png" width="800"/></p>
<p>換到<span> /</span><span>gitserver/repository/repo1 執行 git init --bare</span></p>
<p><span><img alt="" height="43" src="/images/gitinit2.png" width="773"/></span></p>
<p><span>再回到 /gitproject/repository/repo1 執行 echo "Hello, World!" &gt; README.md</span></p>
<p>最後在add commit push 就可以</p>
<p><img alt="" height="331" src="/images/gitadd.png" width="800"/></p>
<p>目前由於執行完以上步驟後無法正常push，因此暫時將相關資料刪除。</p>
<h2>w10 專案</h2>
<p>建立一個包含以下程式的gist</p>
<p>並且取出其URL: <a href="https://gist.githubusercontent.com/40823238/cc863ec47f3362791ca01a10ecd5e786/raw/2a586f54076df00d5b1e846c550954a8a4089e7e/40823238_w10_step1.py">gist.githubusercontent.com/40823238/cc863ec47f3362791ca01a10ecd5e786/raw/2a586f54076df00d5b1e846c550954a8a4089e7e/40823238_w10_step1.py</a></p>
<p>接著到Brython頁面的網址後加 ?src=URL</p>
<p>就可在<a href="https://40823238.github.io/wcm2024/content/Brython.html?src=https://gist.githubusercontent.com/40823238/cc863ec47f3362791ca01a10ecd5e786/raw/2a586f54076df00d5b1e846c550954a8a4089e7e/40823238_w10_step1.py">頁面</a>中運行程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import window, ajax
  
def fetch_csv_data():
  # CSV 檔案網址
  url = "https://mdewcm2024.github.io/1astud-site/downloads/1a.txt"
  
  def on_complete(req):
    if req.status == 200 or req.status == 0:
      # 讀取 CSV 檔案內容
      content = req.text
  
      # 依照換行符號拆分資料
      lines = content.split('\n')
  
      # 建立空列表儲存資料
      data = []
  
      # 遍歷每一行資料
      for line in lines:
        # 忽略空白行
        if line.strip() == "":
          continue
  
        # 依照逗號拆分資料
        items = line.split(',')
  
        # 將拆分後的資料加入列表
        data.append(items)
  
      # 印出結果
      print(data)
    else:
      print("Error:", req.text)
  
  # 發送 AJAX 請求
  req = ajax.ajax()
  req.bind('complete', on_complete)
  req.open('GET', url, True)
  req.set_header('content-type', 'application/x-www-form-urlencoded')
  req.send()
  
# 呼叫函式讀取 CSV 資料
fetch_csv_data()</pre>
<h2>1astud-site</h2>
<p style="text-align: left;"><span>40823238 心得</span></p>
<p style="text-align: left;"><span>這是我睽違兩年再次上github相關的課程，與之前相比，github多了很多方便的功能，其中最有感的是codespace，他不僅取代了可攜式系統，還讓操作更直觀，更重要的是不會占太多儲存空間。讓一些操作可以更快執行。</span></p>
<h1>期末專案</h1>
<p>打磚塊小遊戲</p>
<p><button id="startButton">Start Game</button> <canvas height="320" id="myCanvas" width="480"></canvas></p>
<p><a href="https://gist.github.com/40823238/3944488f29d17b8d6b7771c9b75b8a9b">程式碼(gist)</a></p>
<script>
var canvas = document.getElementById("myCanvas");
      var ctx = canvas.getContext("2d");
      var ballRadius = 10;
      var x = canvas.width/2;
      var y = canvas.height-30;
      var dx = 2;
      var dy = -2;
      var paddleHeight = 10;
      var paddleWidth = 75;
      var paddleX = (canvas.width-paddleWidth)/2;
      var rightPressed = false;
      var leftPressed = false;
      var brickRowCount = 5;
      var brickColumnCount = 3;
      var brickWidth = 75;
      var brickHeight = 20;
      var brickPadding = 10;
      var brickOffsetTop = 30;
      var brickOffsetLeft = 30;
      var score = 0;
      var lives = 3;
      var bricks = [];
      var gameStarted = false;

      for(var c=0; c<brickColumnCount; c++) {
        bricks[c] = [];
        for(var r=0; r<brickRowCount; r++) {
          bricks[c][r] = { x: 0, y: 0, status: 1 };
        }
      }

      document.addEventListener("keydown", keyDownHandler, false);
      document.addEventListener("keyup", keyUpHandler, false);
      document.addEventListener("mousemove", mouseMoveHandler, false);
      document.getElementById("startButton").addEventListener("click", startGame);

      function startGame() {
        if (!gameStarted) {
          gameStarted = true;
          draw();
        }
      }

      function keyDownHandler(e) {
        if(e.key == "Right" || e.key == "ArrowRight") {
          rightPressed = true;
        }
        else if(e.key == "Left" || e.key == "ArrowLeft") {
          leftPressed = true;
        }
      }

      function keyUpHandler(e) {
        if(e.key == "Right" || e.key == "ArrowRight") {
          rightPressed = false;
        }
        else if(e.key == "Left" || e.key == "ArrowLeft") {
          leftPressed = false;
        }
      }

      function mouseMoveHandler(e) {
        var relativeX = e.clientX - canvas.offsetLeft;
        if(relativeX > 0 && relativeX < canvas.width) {
          paddleX = relativeX - paddleWidth/2;
        }
      }

      function collisionDetection() {
        for(var c=0; c<brickColumnCount; c++) {
          for(var r=0; r<brickRowCount; r++) {
            var b = bricks[c][r];
            if(b.status == 1) {
              if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
                dy = -dy;
                b.status = 0;
                score++;
                if(score == brickRowCount*brickColumnCount) {
                  alert("YOU WIN, CONGRATS!");
                  document.location.reload();
                }
              }
            }
          }
        }
      }

      function drawBall() {
        ctx.beginPath();
        ctx.arc(x, y, ballRadius, 0, Math.PI*2);
        ctx.fillStyle = "#0095DD";
        ctx.fill();
        ctx.closePath();
      }

      function drawPaddle() {
        ctx.beginPath();
        ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
        ctx.fillStyle = "#0095DD";
        ctx.fill();
        ctx.closePath();
      }

      function drawBricks() {
        for(var c=0; c<brickColumnCount; c++) {
          for(var r=0; r<brickRowCount; r++) {
            if(bricks[c][r].status == 1) {
              var brickX = (r*(brickWidth+brickPadding))+brickOffsetLeft;
              var brickY = (c*(brickHeight+brickPadding))+brickOffsetTop;
              bricks[c][r].x = brickX;
              bricks[c][r].y = brickY;
              ctx.beginPath();
              ctx.rect(brickX, brickY, brickWidth, brickHeight);
              ctx.fillStyle = "#0095DD";
              ctx.fill();
              ctx.closePath();
            }
          }
        }
      }

      function drawScore() {
        ctx.font = "16px Arial";
        ctx.fillStyle = "#0095DD";
        ctx.fillText("Score: "+score, 8, 20);
      }

      function drawLives() {
        ctx.font = "16px Arial";
        ctx.fillStyle = "#0095DD";
        ctx.fillText("Lives: "+lives, canvas.width-65, 20);
      }

      function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawBricks();
        drawBall();
        drawPaddle();
        drawScore();
        drawLives();
        collisionDetection();

        if(x + dx > canvas.width-ballRadius || x + dx < ballRadius) {
          dx = -dx;
        }
        if(y + dy < ballRadius) {
          dy = -dy;
        }
        else if(y + dy > canvas.height-ballRadius) {
          if(x > paddleX && x < paddleX + paddleWidth) {
            dy = -dy;
          }
          else {
            lives--;
            if(!lives) {
              alert("GAME OVER");
              document.location.reload();
            }
            else {
              x = canvas.width/2;
              y = canvas.height-30;
              dx = 3;
              dy = -3;
              paddleX = (canvas.width-paddleWidth)/2;
            }
          }
        }

        if(rightPressed && paddleX < canvas.width-paddleWidth) {
          paddleX += 7;
        }
        else if(leftPressed && paddleX > 0) {
          paddleX -= 7;
        }

        x += dx;
        y += dy;
        requestAnimationFrame(draw);
      }
</script><h1>Video</h1>
<p>這是本系畢業生陳致文<a href="https://github.com/40823218">40823218 (github.com)</a>的AI作品</p>
<p>他本人日前已前往日本深造</p>
<p>期待他一年後學成歸國後給我們帶來更多作品</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/xi7psbBKYVY?si=RcCmtstToPzfvR2l" title="YouTube video player" width="560"></iframe></p>
<h1>Git</h1>
<p><iframe allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="352" loading="lazy" src="https://open.spotify.com/embed/playlist/1wNirTC24xxOGVDAKf9sXu?utm_source=generator" style="border-radius: 12px;" width="100%"></iframe></p>
<h1>1a-ag8</h1>
<p>網頁: <a href="https://mdewcm2024.github.io/1a-ag8">https://mdewcm2024.github.io/1a-ag8</a></p>
<p>倉儲: <a href="https://github.com/mdewcm2024/1a-ag8">mdewcm2024/1a-ag8</a></p>
<h2>(已解決)小組倉儲無法正常push</h2>
<p></p>
<p>從上週mdecycu的2次commit後(如圖一)，組員的push開始在build時就失敗(如圖二圖三)，導致網站無法正常更新。</p>
<p>原因:小組組員用ssh將倉儲git clone時發生錯誤，導致該組員的子模組沒有清除乾淨，影響到倉儲轉Github Pages</p>
<p>解決辦法:把多餘的子模組刪除<img alt="" height="126" src="/images/repository4.png" width="554"/></p>
<p></p>
<p>(圖一)小組倉儲commits</p>
<p><img alt="" height="363" src="/images/repository1.png" width="520"/></p>
<p>(圖二)check fail</p>
<p><img alt="" height="322" src="/images/repository2.png" width="521"/></p>
<p></p>
<p>(圖三) build details</p>
<p><img alt="" height="272" src="/images/repository3.png" width="559"/></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<div id="gtx-trans" style="position: absolute; left: -5px; top: 3783.42px;">
<div class="gtx-trans-icon"></div>
</div>